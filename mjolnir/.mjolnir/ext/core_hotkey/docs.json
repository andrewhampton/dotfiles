[
  {
    "name": "core.hotkey",
    "doc": "Create and manage global hotkeys.",
    "items": [
      {
        "type": "Function",
        "name": "new",
        "def": "core.hotkey.new(mods, key, pressedfn, releasedfn = nil) -> hotkey",
        "doc": "Creates a new hotkey that can be enabled.\n\nThe `mods` parameter is case-insensitive and may contain any of the following strings: \"cmd\", \"ctrl\", \"alt\", or \"shift\".\n\nThe `key` parameter is case-insensitive and may be any string value found in core.keycodes.map\n\nThe `pressedfn` parameter is the function that will be called when this hotkey is pressed.\n\nThe `releasedfn` parameter is the function that will be called when this hotkey is released; this field is optional (i.e. may be nil or omitted)."
      },
      {
        "type": "Function",
        "name": "enable",
        "def": "core.hotkey:enable() -> self",
        "doc": "Registers the hotkey's fn as the callback when the user presses key while holding mods."
      },
      {
        "type": "Function",
        "name": "disable",
        "def": "core.hotkey:disable() -> self",
        "doc": "Disables the given hotkey; does not remove it from core.hotkey.keys."
      },
      {
        "type": "Function",
        "name": "disableall",
        "def": "core.hotkey.disableall()",
        "doc": "Disables all hotkeys; automatically called when user config reloads."
      },
      {
        "type": "Function",
        "name": "bind",
        "def": "core.hotkey.bind(mods, key, pressedfn, releasedfn) -> hotkey",
        "doc": "Shortcut for: return core.hotkey.new(mods, key, pressedfn, releasedfn):enable()"
      }
    ]
  }
]
