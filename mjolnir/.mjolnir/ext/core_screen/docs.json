[
  {
    "name": "core.screen",
    "doc": "Manipulate screens (i.e. monitors).\n\nYou usually get a screen through a window (see `core.window.screen`). But you can get screens by themselves through this module, albeit not in any defined/useful order.\n\nHydra's coordinate system assumes a grid that is the union of every screen's rect (see `core.screen.frame_including_dock_and_menu`).\n\nEvery window's position (i.e. `topleft`) and size are relative to this grid, and they're usually within the grid. A window that's semi-offscreen only intersects the grid.",
    "items": [
      {
        "type": "Function",
        "name": "frame",
        "def": "core.screen:frame(screen) -> rect",
        "doc": "Returns a screen's frame in its own coordinate space.\n\nNOTE: you probably want to use screen:frame_including_dock_and_menu() instead."
      },
      {
        "type": "Function",
        "name": "visibleframe",
        "def": "core.screen:visibleframe(screen) -> rect",
        "doc": "Returns a screen's frame in its own coordinate space, without the dock or menu.\n\nNOTE: you probably want to use screen:frame_without_dock_or_menu() instead."
      },
      {
        "type": "Function",
        "name": "id",
        "def": "core.screen:id(screen) -> number",
        "doc": "Returns a screen's unique ID."
      },
      {
        "type": "Function",
        "name": "name",
        "def": "core.screen:name(screen) -> string",
        "doc": "Returns the preferred name for the screen set by the manufacturer."
      },
      {
        "type": "Function",
        "name": "settint",
        "def": "core.screen.settint(redarray, greenarray, bluearray)",
        "doc": "Set the tint on a screen; experimental."
      },
      {
        "type": "Function",
        "name": "allscreens",
        "def": "core.screen.allscreens() -> screen[]",
        "doc": "Returns all the screens there are."
      },
      {
        "type": "Function",
        "name": "mainscreen",
        "def": "core.screen.mainscreen() -> screen",
        "doc": "Returns the 'main' screen, i.e. the one containing the currently focused window."
      },
      {
        "type": "Function",
        "name": "frame_including_dock_and_menu",
        "def": "core.screen:frame_including_dock_and_menu() -> rect",
        "doc": "Returns the screen's rect in absolute coordinates, including the dock and menu."
      },
      {
        "type": "Function",
        "name": "frame_without_dock_or_menu",
        "def": "core.screen:frame_without_dock_or_menu() -> rect",
        "doc": "Returns the screen's rect in absolute coordinates, without the dock or menu."
      },
      {
        "type": "Function",
        "name": "next",
        "def": "core.screen:next() -> screen",
        "doc": "Returns the screen 'after' this one (I have no idea how they're ordered though); this method wraps around to the first screen."
      },
      {
        "type": "Function",
        "name": "previous",
        "def": "core.screen:previous() -> screen",
        "doc": "Returns the screen 'before' this one (I have no idea how they're ordered though); this method wraps around to the last screen."
      },
      {
        "type": "Function",
        "name": "toeast",
        "def": "core.screen:toeast()",
        "doc": "Get the first screen to the east of this one, ordered by proximity."
      },
      {
        "type": "Function",
        "name": "towest",
        "def": "core.screen:towest()",
        "doc": "Get the first screen to the west of this one, ordered by proximity."
      },
      {
        "type": "Function",
        "name": "tonorth",
        "def": "core.screen:tonorth()",
        "doc": "Get the first screen to the north of this one, ordered by proximity."
      },
      {
        "type": "Function",
        "name": "tosouth",
        "def": "core.screen:tosouth()",
        "doc": "Get the first screen to the south of this one, ordered by proximity."
      }
    ]
  }
]
