[
  {
    "name": "core.fnutils",
    "doc": "Super-helpful functional programming utilities.",
    "items": [
      {
        "type": "Function",
        "name": "map",
        "def": "core.fnutils.map(t, fn) -> t",
        "doc": "Returns a table of the results of fn(el) on every el in t."
      },
      {
        "type": "Function",
        "name": "each",
        "def": "core.fnutils.each(t, fn) -> t",
        "doc": "Runs fn(el) for every el in t."
      },
      {
        "type": "Function",
        "name": "filter",
        "def": "core.fnutils.filter(t, fn) -> t",
        "doc": "Returns a table of the elements in t in which fn(el) is truthy."
      },
      {
        "type": "Function",
        "name": "copy",
        "def": "core.fnutils.copy(t) -> t2",
        "doc": "Returns a new copy of t using pairs(t)."
      },
      {
        "type": "Function",
        "name": "contains",
        "def": "core.fnutils.contains(t, el) -> bool",
        "doc": "Returns whether the table contains the given element."
      },
      {
        "type": "Function",
        "name": "indexof",
        "def": "core.fnutils.indexof(t, el) -> int or nil",
        "doc": "Returns the index of a given element in a table, or nil if not found."
      },
      {
        "type": "Function",
        "name": "concat",
        "def": "core.fnutils.concat(t1, t2)",
        "doc": "Adds all elements of t2 to the end of t1."
      },
      {
        "type": "Function",
        "name": "mapcat",
        "def": "core.fnutils.mapcat(t, fn) -> t2",
        "doc": "Runs fn(el) for every el in t, and assuming the results are tables, combines them into a new table."
      },
      {
        "type": "Function",
        "name": "reduce",
        "def": "core.fnutils.reduce(t, fn) -> t2",
        "doc": "Runs fn(el1, el2) for every el in t, then fn(result, el3), etc, until there's only one left."
      },
      {
        "type": "Function",
        "name": "find",
        "def": "core.fnutils.find(t, fn) -> el",
        "doc": "Returns the first element where fn(el) is truthy."
      },
      {
        "type": "Function",
        "name": "sequence",
        "def": "core.fnutils.sequence(...) -> fn",
        "doc": "Returns a list of the results of the passed functions."
      },
      {
        "type": "Function",
        "name": "partial",
        "def": "core.fnutils.partial(fn, ...) -> fn'",
        "doc": "Returns fn partially applied to arg (...)."
      },
      {
        "type": "Function",
        "name": "cycle",
        "def": "core.fnutils.cycle(t) -> fn() -> t[n]",
        "doc": "Returns a function that returns t[1], t[2], ... t[#t], t[1], ... on successive calls.\nExample:\n    f = cycle({4, 5, 6})\n    {f(), f(), f(), f(), f(), f(), f()} == {4, 5, 6, 4, 5, 6, 4}"
      }
    ]
  }
]
