[
  {
    "name": "core.window",
    "doc": "Functions for managing any window.\n\nTo get windows, see `core.window.focusedwindow` and `core.window.visiblewindows`.\n\nTo get window geometrical attributes, see `core.window.{frame,size,topleft}`.\n\nTo move and resize windows, see `core.window.set{frame,size,topleft}`.\n\nIt may be handy to get a window's app or screen via `core.window.application` and `core.window.screen`.\n\nSee the `screen` module for detailed explanation of how Hydra uses window/screen coordinates.",
    "items": [
      {
        "type": "Function",
        "name": "focusedwindow",
        "def": "core.window.focusedwindow() -> window",
        "doc": "Returns the focused window, or nil."
      },
      {
        "type": "Function",
        "name": "title",
        "def": "core.window:title() -> string",
        "doc": "Returns the title of the window (as UTF8)."
      },
      {
        "type": "Function",
        "name": "subrole",
        "def": "core.window:subrole() -> string",
        "doc": "Returns the subrole of the window, whatever that means."
      },
      {
        "type": "Function",
        "name": "role",
        "def": "core.window:role() -> string",
        "doc": "Returns the role of the window, whatever that means."
      },
      {
        "type": "Function",
        "name": "isstandard",
        "def": "core.window:isstandard() -> bool",
        "doc": "True if the window's subrole indicates it's 'a standard window'."
      },
      {
        "type": "Function",
        "name": "topleft",
        "def": "core.window:topleft() -> point",
        "doc": "The top-left corner of the window in absolute coordinates."
      },
      {
        "type": "Function",
        "name": "size",
        "def": "core.window:size() -> size",
        "doc": "The size of the window."
      },
      {
        "type": "Function",
        "name": "settopleft",
        "def": "core.window:settopleft(point)",
        "doc": "Moves the window to the given point in absolute coordinate."
      },
      {
        "type": "Function",
        "name": "setsize",
        "def": "core.window:setsize(size)",
        "doc": "Resizes the window."
      },
      {
        "type": "Function",
        "name": "close",
        "def": "core.window:close() -> bool",
        "doc": "Closes the window; returns whether it succeeded."
      },
      {
        "type": "Function",
        "name": "setfullscreen",
        "def": "core.window:setfullscreen(bool) -> bool",
        "doc": "Sets whether the window is full screen; returns whether it succeeded."
      },
      {
        "type": "Function",
        "name": "isfullscreen",
        "def": "core.window:isfullscreen() -> bool or nil",
        "doc": "Returns whether the window is full screen, or nil if asking that question fails."
      },
      {
        "type": "Function",
        "name": "minimize",
        "def": "core.window:minimize()",
        "doc": "Minimizes the window."
      },
      {
        "type": "Function",
        "name": "unminimize",
        "def": "core.window:unminimize()",
        "doc": "Un-minimizes the window."
      },
      {
        "type": "Function",
        "name": "isminimized",
        "def": "core.window:isminimized() -> bool",
        "doc": "True if the window is currently minimized in the dock."
      },
      {
        "type": "Function",
        "name": "application",
        "def": "core.window:application() -> app",
        "doc": "Returns the app that the window belongs to; may be nil."
      },
      {
        "type": "Function",
        "name": "becomemain",
        "def": "core.window:becomemain() -> bool",
        "doc": "Make this window the main window of the given application; deos not implicitly focus the app."
      },
      {
        "type": "Function",
        "name": "id",
        "def": "core.window:id() -> number, sometimes nil",
        "doc": "Returns a unique number identifying this window."
      },
      {
        "type": "Function",
        "name": "allwindows",
        "def": "core.window.allwindows() -> win[]",
        "doc": "Returns all windows"
      },
      {
        "type": "Function",
        "name": "windowforid",
        "def": "core.window.windowforid() -> win or nil",
        "doc": "Returns the window for the given id, or nil if it's an invalid id."
      },
      {
        "type": "Function",
        "name": "isvisible",
        "def": "core.window:isvisible() -> bool",
        "doc": "True if the app is not hidden and the window is not minimized.\nNOTE: some apps (e.g. in Adobe Creative Cloud) have literally-invisible windows and also like to put them very far offscreen; this method may return true for such windows."
      },
      {
        "type": "Function",
        "name": "frame",
        "def": "core.window:frame() -> rect",
        "doc": "Get the frame of the window in absolute coordinates."
      },
      {
        "type": "Function",
        "name": "setframe",
        "def": "core.window:setframe(rect)",
        "doc": "Set the frame of the window in absolute coordinates."
      },
      {
        "type": "Function",
        "name": "otherwindows_samescreen",
        "def": "core.window:otherwindows_samescreen() -> win[]",
        "doc": "Get other windows on the same screen as self."
      },
      {
        "type": "Function",
        "name": "otherwindows_allscreens",
        "def": "core.window:otherwindows_allscreens() -> win[]",
        "doc": "Get every window except this one."
      },
      {
        "type": "Function",
        "name": "focus",
        "def": "core.window:focus() -> bool",
        "doc": "Try to make this window focused."
      },
      {
        "type": "Function",
        "name": "visiblewindows",
        "def": "core.window.visiblewindows() -> win[]",
        "doc": "Get all windows on all screens that match window.isvisible."
      },
      {
        "type": "Function",
        "name": "orderedwindows",
        "def": "core.window.orderedwindows() -> win[]",
        "doc": "Returns all visible windows, ordered from front to back."
      },
      {
        "type": "Function",
        "name": "maximize",
        "def": "core.window:maximize()",
        "doc": "Make this window fill the whole screen its on, without covering the dock or menu."
      },
      {
        "type": "Function",
        "name": "screen",
        "def": "core.window:screen()",
        "doc": "Get the screen which most contains this window (by area)."
      },
      {
        "type": "Function",
        "name": "windows_to_east",
        "def": "core.window:windows_to_east()",
        "doc": "Get all windows east of this one, ordered by closeness."
      },
      {
        "type": "Function",
        "name": "windows_to_west",
        "def": "core.window:windows_to_west()",
        "doc": "Get all windows west of this one, ordered by closeness."
      },
      {
        "type": "Function",
        "name": "windows_to_north",
        "def": "core.window:windows_to_north()",
        "doc": "Get all windows north of this one, ordered by closeness."
      },
      {
        "type": "Function",
        "name": "windows_to_south",
        "def": "core.window:windows_to_south()",
        "doc": "Get all windows south of this one, ordered by closeness."
      },
      {
        "type": "Function",
        "name": "focuswindow_east",
        "def": "core.window:focuswindow_east()",
        "doc": "Focus the first focus-able window to the east of this one."
      },
      {
        "type": "Function",
        "name": "focuswindow_west",
        "def": "core.window:focuswindow_west()",
        "doc": "Focus the first focus-able window to the west of this one."
      },
      {
        "type": "Function",
        "name": "focuswindow_north",
        "def": "core.window:focuswindow_north()",
        "doc": "Focus the first focus-able window to the north of this one."
      },
      {
        "type": "Function",
        "name": "focuswindow_south",
        "def": "core.window:focuswindow_south()",
        "doc": "Focus the first focus-able window to the south of this one."
      },
      {
        "type": "Function",
        "name": "movetounit",
        "def": "core.window:movetounit(rect)",
        "doc": "Moves and resizes the window to fit on the given portion of the screen.\nThe argument is a rect with each key being between 0.0 and 1.0.\nExample: win:movetounit(x=0, y=0, w=0.5, h=0.5) -- window now fills top-left quarter of screen"
      }
    ]
  }
]
